/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package views;

import DAO.QuanLyDao;
import Models.QuanLy;
import javax.swing.JOptionPane;

/**
 *
 * @author haunv
 */
public class DoiMatKhau_JDialog extends javax.swing.JDialog {

    private QuanLy u;

    /**
     * Creates new form DoiMatKhau_JDialog
     */
    public DoiMatKhau_JDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
    }

    public DoiMatKhau_JDialog() {
        initComponents();
        setLocationRelativeTo(null);
        this.u = Helper.Auth.user;
        txtMaQL.setText(u.getMaQL());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMaQL = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnXacNhan = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        textOldPassword = new javax.swing.JPasswordField();
        textNewPassword = new javax.swing.JPasswordField();
        textConfirmPassword = new javax.swing.JPasswordField();
        btnHuy = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ĐỔI MẬT KHẨU");

        jLabel2.setText("Mã quản lý:");

        txtMaQL.setEditable(false);
        txtMaQL.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtMaQL.setForeground(new java.awt.Color(204, 0, 0));

        jLabel3.setText("Mật khẩu hiện tại");

        jLabel4.setText("Mật khẩu mới");

        btnXacNhan.setBackground(new java.awt.Color(51, 51, 255));
        btnXacNhan.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnXacNhan.setForeground(new java.awt.Color(255, 255, 255));
        btnXacNhan.setText("Xác nhận");
        btnXacNhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXacNhanActionPerformed(evt);
            }
        });

        jLabel5.setText("Xác nhận mật khẩu mới");

        textOldPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textOldPasswordFocusGained(evt);
            }
        });
        textOldPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textOldPasswordKeyPressed(evt);
            }
        });

        textNewPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textNewPasswordFocusGained(evt);
            }
        });
        textNewPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textNewPasswordKeyPressed(evt);
            }
        });

        textConfirmPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textConfirmPasswordFocusGained(evt);
            }
        });
        textConfirmPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textConfirmPasswordKeyPressed(evt);
            }
        });

        btnHuy.setBackground(new java.awt.Color(255, 153, 0));
        btnHuy.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnHuy.setForeground(new java.awt.Color(255, 255, 255));
        btnHuy.setText("Hủy");
        btnHuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textConfirmPassword, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textNewPassword, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textOldPassword, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMaQL, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(btnXacNhan, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnHuy, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMaQL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textOldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnXacNhan)
                    .addComponent(btnHuy))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnXacNhanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXacNhanActionPerformed
        this.doiMatKhau();
    }//GEN-LAST:event_btnXacNhanActionPerformed

    private void textOldPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textOldPasswordFocusGained
        this.textOldPassword.setText("");
    }//GEN-LAST:event_textOldPasswordFocusGained

    private void textOldPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textOldPasswordKeyPressed
        switch (evt.getKeyCode()) {
            case java.awt.event.KeyEvent.VK_ENTER, java.awt.event.KeyEvent.VK_DOWN ->
                this.textNewPassword.requestFocus();
            case java.awt.event.KeyEvent.VK_UP ->
                this.textConfirmPassword.requestFocus();
            case java.awt.event.KeyEvent.VK_ESCAPE ->
                this.dispose();
            default -> {
            }
        }
    }//GEN-LAST:event_textOldPasswordKeyPressed

    private void textNewPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textNewPasswordFocusGained
        this.textNewPassword.setText("");
    }//GEN-LAST:event_textNewPasswordFocusGained

    private void textNewPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textNewPasswordKeyPressed
        switch (evt.getKeyCode()) {
            case java.awt.event.KeyEvent.VK_ENTER, java.awt.event.KeyEvent.VK_DOWN ->
                this.textConfirmPassword.requestFocus();
            case java.awt.event.KeyEvent.VK_UP ->
                this.textOldPassword.requestFocus();
            case java.awt.event.KeyEvent.VK_ESCAPE ->
                this.dispose();
            default -> {
            }
        }
    }//GEN-LAST:event_textNewPasswordKeyPressed

    private void textConfirmPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textConfirmPasswordFocusGained
        this.textConfirmPassword.setText("");
    }//GEN-LAST:event_textConfirmPasswordFocusGained

    private void textConfirmPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textConfirmPasswordKeyPressed
        switch (evt.getKeyCode()) {
            case java.awt.event.KeyEvent.VK_ENTER ->
                this.doiMatKhau();
            case java.awt.event.KeyEvent.VK_UP ->
                this.textNewPassword.requestFocus();
            case java.awt.event.KeyEvent.VK_DOWN ->
                this.textOldPassword.requestFocus();
            case java.awt.event.KeyEvent.VK_ESCAPE ->
                this.dispose();
            default -> {
            }
        }
    }//GEN-LAST:event_textConfirmPasswordKeyPressed

    private void btnHuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnHuyActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(DoiMatKhau_JDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(DoiMatKhau_JDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(DoiMatKhau_JDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(DoiMatKhau_JDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                DoiMatKhau_JDialog dialog = new DoiMatKhau_JDialog(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHuy;
    private javax.swing.JButton btnXacNhan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPasswordField textConfirmPassword;
    private javax.swing.JPasswordField textNewPassword;
    private javax.swing.JPasswordField textOldPassword;
    private javax.swing.JTextField txtMaQL;
    // End of variables declaration//GEN-END:variables

    private void doiMatKhau() {
        if (checkForm()) {
            String oldPass = String.valueOf(textOldPassword.getPassword()).trim();
            if (oldPass.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mật khẩu cũ không được bỏ trống");
                return;
            }
            oldPass = Helper.PasswordEncoder.getInstance()
                    .encode(oldPass);

            if (!u.getMatKhau().equals(oldPass)) {
                JOptionPane.showMessageDialog(this, "Mật khẩu cũ sai");
            } else {
                String newPass = String.valueOf(textNewPassword.getPassword()).trim();
                if (newPass.length() < 6) {
                    JOptionPane.showMessageDialog(this, "Mật khẩu phải từ 6 ký tự trở lên");
                } else if (newPass.contains(" ")) {
                    JOptionPane.showMessageDialog(this, "Mật khẩu không hợp lệ");
                } else {
                    String confirmPass = String.valueOf(textConfirmPassword.getPassword()).trim();

                    if (!newPass.equals(confirmPass)) {
                        JOptionPane.showMessageDialog(this, "Mật khẩu xác nhận sai!");
                        return;
                    } else {
                        newPass = Helper.PasswordEncoder.getInstance()
                                .encode(newPass);
                        u.setMatKhau(newPass);

                        if (QuanLyDao.getInstance().insertOnUpdate(u) <= 0) {
                            JOptionPane.showMessageDialog(this, "Lỗi server\n code: -1!");
                            return;
                        } else {
                            JOptionPane.showMessageDialog(this, "Cập nhật thành công!");
                            Helper.Auth.user = u;
                            refresh();
                        }

                    }
                }
            }
        }
    }

    private boolean checkForm() {
        if (textNewPassword.getText().isEmpty() | textOldPassword.getText().isEmpty()
                | textConfirmPassword.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Dữ liệu không đuọc bỏ trống");
            return false;
        }
        return true;
    }

    private void refresh() {
        textOldPassword.setText(null);
        textNewPassword.setText(null);
        textConfirmPassword.setText(null);
    }
}
